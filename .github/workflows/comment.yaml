name: Deploy on Staging
run-name: deploy stg ${{ github.event.issue.number }} by @${{ github.actor }}

on:
  issue_comment:
    types:
      - created
      - edited

permissions:
  pull-requests: write
  issues: write # Required to post comments

jobs:
  check-pr-comments:
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request && github.event.comment.body == '/deploy-stg' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check Deploy
        id: check-deploy
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
        run: |
          PR_OWNER=$(gh pr view ${{ github.event.issue.number }} --json author -q '.author.login')
          COMMENT_AUTHOR=${{ github.actor }}

          if [ "$PR_OWNER" != "$COMMENT_AUTHOR" ]; then
            echo "::error::The owner of the PR ($PR_OWNER) is not the same as the user who sent the comment ($COMMENT_AUTHOR)."
            gh pr comment ${{ github.event.issue.number }} --body "[BOT] :x: **Error**: The owner of the PR ($PR_OWNER) is not the same as the user who sent the comment ($COMMENT_AUTHOR)."
            exit 1
          fi

          # Create a comment on the PR indicating that the action is waiting for approval
          ACTION_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          gh pr comment ${{ github.event.issue.number }} --body "[BOT] :hourglass: **Waiting Approval** on your action: [Action Link]($ACTION_URL)"

  detect_namespace:
    runs-on: ubuntu-latest
    # if: ${{ needs.approve-deploy.outputs.VALID == 'true' }}
    # needs: [approve-deploy]
    outputs:
      APPLICATION_JSON_LIST: ${{ steps.detect_namespace.outputs.APPLICATION_JSON_LIST }}
      NAMESPACE: ${{ steps.detect_namespace.outputs.NAMESPACE }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Detect Namespace
        id: detect_namespace
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
        run: |
          PR_TITLE=$(gh pr view ${{ github.event.issue.number }} --json title -q '.title')
          NAMESPACE=$(echo "$PR_TITLE" | awk '/^\w+\(/ { match($0, /\(([^)]+)\)/, arr); if (arr[1] != "") print arr[1] }')
          echo "namespace: $NAMESPACE"
          if [ -z "$NAMESPACE" ]; then
            echo "::error::pr title not follow the pattern."
            exit 1
          fi
          #check if namespace exists
          if [ ! -d "./internal/$NAMESPACE" ]; then
            echo "::error::Namespace '$NAMESPACE' does not exist as a folder in ./internal."
            exit 1
          fi

          # Search for subfolders in the chart folder that start with $NAMESPACE and extract only the folder names
          MATCHING_FOLDERS=$(find ./chart -type d -name "${NAMESPACE}*" -exec basename {} \;)

          if [ -z "$MATCHING_FOLDERS" ]; then
            echo "::error::No subfolders in the chart folder start with namespace '$NAMESPACE'."
            exit 1
          fi

          # Transform MATCHING_FOLDERS into a JSON list and add "bank-" as a prefix to each folder
          APPLICATION_JSON_LIST=$(echo "$MATCHING_FOLDERS" | awk '{print "\"bank-" $0 "\""}' | paste -sd, -)
          APPLICATION_JSON_LIST="[$APPLICATION_JSON_LIST]"
          echo "Transformed JSON list: $APPLICATION_JSON_LIST"

          echo "APPLICATION_JSON_LIST=$APPLICATION_JSON_LIST" >> $GITHUB_OUTPUT
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_OUTPUT
  
  