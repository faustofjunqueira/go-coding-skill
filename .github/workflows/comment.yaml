name: Deploy on Staging
run-name: deploy stg ${{ github.event.issue.number }} by @${{ github.actor }}

on:
  issue_comment:
    types:
      - created
      - edited

permissions:
  pull-requests: write
  issues: write # Required to post comments

jobs:
  # approve-deploy:
  #   if: ${{ github.event.issue.pull_request && github.event.comment.body == '/approve' }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check PR Comments for /deploy-stg
  #       id: check-pr-comments
  #       uses: actions/github-script@v6
  #       with:
  #         result-encoding: string
  #         script: |
  #           async function failedApprove(commentId, reason) {
  #             await github.rest.issues.deleteComment({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               comment_id: commentId,
  #             });

  #             await github.rest.issues.createComment({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               issue_number: context.issue.number,
  #               body: `[BOT] :x: **Deploy approve failed**: ${reason}`,
  #             });

  #             throw reason;
  #           }

  #           async function successApprove(commentId) {
  #             await github.rest.issues.deleteComment({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               comment_id: commentId,
  #             });

  #             await github.rest.issues.createComment({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               issue_number: context.issue.number,
  #               body: `[BOT] :white_check_mark: **Deploy approve success by @${context.payload.comment.user.login}**`,
  #             });
  #           }

  #           const prNumber = context.payload.issue.number;
  #           const user = context.payload.comment.user.login;
  #           const commentID = context.payload.comment.id;
  #           const prOwner = context.payload.issue.user.login;

  #           try {
  #             // Fetch all comments from the PR
  #             const { data: comments } = await github.rest.issues.listComments({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               issue_number: prNumber,
  #             });

  #             if (!comments || comments.length === 0) {
  #               await failedApprove(commentID, "No comments found on the PR!");
  #             }

  #             const sortedComments = comments
  #               .filter(comment => comment.body.trim() === '/deploy-stg' || comment.body.trim() === '/approve')
  #               .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));            

  #             const primeDeployRequest = sortedComments.find(comment => comment.body.trim() === '/deploy-stg');
              
  #             if (!primeDeployRequest) {
  #               await failedApprove(commentID, "No deploy request found, drop the approve request!");
  #             }

  #             const deployRequestAmount = sortedComments.filter(comment => comment.body.trim() === '/deploy-stg').length;
  #             const approveAmount = sortedComments.filter(comment => comment.body.trim() === '/approve').length;
              
  #             // Deploy Request Amount must be has at least 1
  #             if (deployRequestAmount != approveAmount + 1) {
  #               await failedApprove(commentID, "Deploy request amount must be 1 more than approve amount. Drop all deploy and approve requests!");
  #             }

  #             // Deploy just can called by the author of the PR
  #             if (primeDeployRequest.user.login !== prOwner) {
  #               await failedApprove(commentID, `Requestor @${primeDeployRequest.user.login} is not the author of the PR(@prOwner), drop the deploy request!`);
  #             }

  #             // Check if approver and requestor are the same
  #             if (approveAmount > 0 && primeDeployRequest.user.login === user) {
  #               await failedApprove(commentID, `Requestor ${user} is the same as the approver, drop the deploy request!`);
  #             }

  #             // Check if the approver is in the approver team
  #             const approverTeam = 'banking-eng-cartao-lideranca';
  #             const { data: teamMembers } = await github.rest.teams.listMembersInOrg({
  #               org: context.repo.owner,
  #               team_slug: approverTeam,
  #             });

  #             const approver = teamMembers.find(member => member.login === user);
  #             if (!approver) {
  #               throw `User ${user} is not in the approver team ${approverTeam}`
  #             }
  #           }catch(e) {
  #             core.setFailed(`Error: ${e}`);
  #           }

  detect_namespace:
    if: ${{ github.event.issue.pull_request && github.event.comment.body == '/approve' }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Detect Namespace
        id: detect_namespace
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
        run: |
          PR_TITLE=$(gh pr view ${{ github.event.issue.number }} --json title -q '.title')
          NAMESPACE=$(echo "$PR_TITLE" | awk '/^\w+\(/ { match($0, /\(([^)]+)\)/, arr); if (arr[1] != "") print arr[1] }')
          echo "namespace: $NAMESPACE"
          if [ -z "$NAMESPACE" ]; then
            echo "::error::pr title not follow the pattern."
            exit 1
          fi
          #check if namespace exists
          if [ ! -d "./internal/$NAMESPACE" ]; then
            echo "::error::Namespace '$NAMESPACE' does not exist as a folder in ./internal."
            exit 1
          fi

          # Search for subfolders in the chart folder that start with $NAMESPACE and extract only the folder names
          MATCHING_FOLDERS=$(find ./chart -type d -name "${NAMESPACE}*" -exec basename {} \;)

          if [ -z "$MATCHING_FOLDERS" ]; then
            echo "::error::No subfolders in the chart folder start with namespace '$NAMESPACE'."
            exit 1
          fi

          # Transform MATCHING_FOLDERS into a JSON list and add "bank-" as a prefix to each folder
          APPLICATION_JSON_LIST=$(echo "$MATCHING_FOLDERS" | awk '{print "\"bank-" $0 "\""}' | paste -sd, -)
          APPLICATION_JSON_LIST="[$APPLICATION_JSON_LIST]"
          echo "Transformed JSON list: $APPLICATION_JSON_LIST"

          echo "APPLICATION_JSON_LIST=$APPLICATION_JSON_LIST" >> $GITHUB_OUTPUT
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_OUTPUT
  
  prepare-deploy:
    if: ${{ success() }}
    runs-on: ubuntu-latest
    needs: [approve-deploy, detect_namespace]
    strategy:
      matrix:
        application: ${{ fromJson(needs.detect_namespace.outputs.APPLICATION_JSON_LIST) }}
    steps:
      - name: Prepare Deploy
        id: prepare_deploy
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
        run: |
          echo "application : ${{ matrix.application }}"
          echo "namespace : ${{ needs.detect_namespace.outputs.NAMESPACE }}"

  
  