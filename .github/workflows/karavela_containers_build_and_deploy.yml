name: build and deploy
run-name: ${{ github.event_name }} ${{ github.ref_name }} by @${{ github.actor }}

permissions:
  contents: write
  deployments: read

on:
  release:
    types:
      - published
      - edited
  push:
    branches:
      - main
    paths:
      - 'cmd/**/*.go'
      - 'internal/**/*.go'

jobs:
  prepare-values:
    # runs-on: small-runner
    runs-on: ubuntu-latest
    outputs:
      SHORT_TAG: ${{ steps.get_short_tag.outputs.SHORT_TAG }}
      NAMESPACE: ${{ steps.ns.outputs.NAMESPACE }}
      APPLICATIONS: ${{ steps.get_apps.outputs.APPLICATIONS }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: get namespace(release)
        id: get_ns_release
        shell: bash
        if: ${{ github.event_name == 'release' }}
        run: |
          # release.name has form XXX/vX.Y.Z â€“
          # NAMESPACE = part before "/"
          RELEASE_NAME="${{ github.event.release.name }}"
          NAMESPACE="${RELEASE_NAME%%/*}"
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_OUTPUT
      
      - name: get namespace(push)
        id: get_ns_push
        shell: bash
        if: ${{ startsWith(github.ref, 'refs/heads/')  }}
        run: |
          # namespace follow this pattern: <conventional commit message>(<namespace>): msg...
          # Ex: ci(stncard-go): ...
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ "$COMMIT_MSG" =~ ^[a-zA-Z]+\(([a-zA-Z0-9_-]+)\): ]]; then
            NAMESPACE="${BASH_REMATCH[1]}"
            echo "NAMESPACE=$NAMESPACE" >> $GITHUB_OUTPUT
            echo "Found namespace: $NAMESPACE from commit: $COMMIT_MSG"
          else
            echo "NAMESPACE=unknown" >> $GITHUB_OUTPUT
          fi
      
      - name: namespace
        id: ns
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "NAMESPACE=${{ steps.get_ns_release.outputs.NAMESPACE }}" >> $GITHUB_OUTPUT
          else
            echo "NAMESPACE=${{ steps.get_ns_push.outputs.NAMESPACE }}" >> $GITHUB_OUTPUT
          fi

      - name: validate namespace
        id: validate_ns
        shell: bash
        run: |
          if [[ "${{ steps.ns.outputs.NAMESPACE }}" == "unknown" ]]; then
            echo "NAMESPACE is unknown. Please check the commit message or release name."
            echo "::error::NAMESPACE is unknown. Please check the commit message or release name."
            exit 1
          fi

          if [ ! -d "./internal/${{ steps.ns.outputs.NAMESPACE }}" ]; then
            echo "Namespace folder ./internal/${{ steps.ns.outputs.NAMESPACE }} does not exist."
            echo "::error::Namespace folder ./internal/${{ steps.ns.outputs.NAMESPACE }} does not exist."
            exit 1
          fi

      - name: get applications
        id: get_apps
        shell: bash
        run: |
          NAMESPACE="${{ steps.ns.outputs.NAMESPACE }}"
          
          # build list of applications under cmd/$NAMESPACE
          APPS=()
          for d in cmd/"$NAMESPACE"/*; do
            [ -d "$d" ] || continue
            NAME=$(basename "$d")
            APPS+=("bank-${NAMESPACE}-${NAME}")
          done

          # represent APPLICATIONS as a JSON array
          APPLICATIONS="["
          for app in "${APPS[@]}"; do
            APPLICATIONS+="\"$app\","
          done
          
          APPLICATIONS="${APPLICATIONS%,}]"  # remove trailing comma, close array
          
          if [[ "$APPLICATIONS" == "[]" ]]; then
            echo "No applications found under cmd/$NAMESPACE."
            echo "::error::No applications found under cmd/$NAMESPACE."
            exit 1
          fi

          echo "APPLICATIONS=$APPLICATIONS" >> $GITHUB_OUTPUT

      - name: get short tag
        id: get_short_tag
        shell: bash
        env:
          SHA: ${{ github.sha }}
        run: |
          # get short tag from the branch name or release tag
          if [[ "${{ github.event_name }}" == "release" ]]; then
            RELEASE_NAME="${{ github.event.release.name }}"
            VERSION="${RELEASE_NAME##*/}"
            # remove 'v' prefix if present
            SHORT_TAG="${VERSION#v}"
          else
            SHORT_TAG="${SHA:0:7}"
          fi

          echo "SHORT_TAG=$SHORT_TAG" >> $GITHUB_OUTPUT

      - name: show output values
        run: |
          echo "SHORT_TAG=${{ steps.get_short_tag.outputs.SHORT_TAG }}"
          echo "NAMESPACE=${{ steps.ns.outputs.NAMESPACE }}"
          echo "APPLICATIONS=${{ steps.get_apps.outputs.APPLICATIONS }}"


  namespace:
    name: show namespace info
    uses: ./.github/workflows/stncard_go_show_namespace_info.yaml
    needs: [prepare-values]
    with:
      # RUNS_ON: small-runner
      runs-on: ubuntu-latest
      NAMESPACE: ${{ needs.prepare-values.outputs.NAMESPACE }}
      APPLICATIONS: ${{ needs.prepare-values.outputs.APPLICATIONS }}
    secrets: inherit

  # compile:
  #   name: Go Compile
  #   uses: ./.github/workflows/stncard_go_build_go.yaml
  #   needs: [prepare-values]
  #   with:
  #     NAMESPACE: ${{ needs.prepare-values.outputs.NAMESPACE }}
  #   secrets: inherit

  # build:
  #   name: Build
  #   if: ${{ startsWith(github.ref, 'refs/heads') || startsWith(github.ref, 'refs/tags/') }}
  #   needs: [compile, prepare-values]
  #   uses: stone-payments/platform-k8s-github-actions/.github/workflows/karavela_build.yml@main
  #   with:
  #     REGISTRY_NAME: bank-${{ needs.prepare-values.outputs.NAMESPACE }}
  #     ARTIFACT_NAME: ${{ needs.compile.outputs.artifact_name }}
  #     ARTIFACT_PATH: ${{ needs.compile.outputs.artifact_dir }}
  #     IMAGE_TAG: ${{ needs.prepare-values.outputs.SHORT_TAG }}
  #     CONTINUE_IF_EXISTING_IMAGE: true
  #   secrets: inherit

  # deploy_stg:
  #   name: Deploy stg
  #   if: ${{ startsWith(github.ref, 'refs/heads') || startsWith(github.ref, 'refs/tags/') }}
  #   needs: [build, prepare-values]
  #   uses: stone-payments/platform-k8s-github-actions/.github/workflows/karavela_deploy.yml@main
  #   strategy:
  #     matrix:
  #       applications: ${{ fromJson(needs.prepare-values.outputs.APPLICATIONS) }}
  #   with:
  #     APPLICATION_NAME: ${{ matrix.applications }}
  #     ENVIRONMENT: "stg"
  #     TARGET_REVISION: ${{ needs.build.outputs.target_revision }}
  #     IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
  #   secrets: inherit

  # deploy_sdx:
  #   name: Deploy sdx
  #   if: ${{ needs.build.outputs.tag_prd_semver == 'true' }}
  #   needs: [build, prepare-values, deploy_stg]
  #   uses: stone-payments/platform-k8s-github-actions/.github/workflows/karavela_deploy.yml@main
  #   strategy:
  #     fail-fast: true
  #     max-parallel: 2
  #     matrix:
  #       applications: ${{ fromJson(needs.prepare-values.outputs.APPLICATIONS) }}
  #   with:
  #     APPLICATION_NAME: ${{ matrix.applications }}
  #     ENVIRONMENT: "sdx"
  #     TARGET_REVISION: ${{ needs.build.outputs.target_revision }}
  #     IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
  #   secrets: inherit

  # approvers:
  #   name: Approvers
  #   if: ${{ needs.build.outputs.tag_prd_semver == 'true' }}
  #   needs: [deploy_sdx]
  #   # runs-on: small-runner
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: true
  #     max-parallel: 2
  #     matrix:
  #       environment: [eng-prd, produto-prd]
  #   environment:
  #     name: ${{ matrix.environment }}
  #   steps:
  #     - name: Approvers
  #       run: |
  #         echo "${{ matrix.environment }} approved!"

  # deploy_prd:
  #   name: Deploy prd
  #   if: ${{ github.event.release.prerelease == false && needs.build.outputs.tag_prd_semver == 'true' }}
  #   needs: [build, prepare-values, approvers, deploy_sdx]
  #   uses: stone-payments/platform-k8s-github-actions/.github/workflows/karavela_deploy.yml@main
  #   strategy:
  #     fail-fast: true
  #     max-parallel: 2
  #     matrix:
  #       applications: ${{ fromJson(needs.prepare-values.outputs.APPLICATIONS) }}
  #   with:
  #     APPLICATION_NAME: ${{ matrix.applications }}
  #     ENVIRONMENT: "prd"
  #     TARGET_REVISION: ${{ needs.build.outputs.target_revision }}
  #     IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
  #   secrets: inherit
