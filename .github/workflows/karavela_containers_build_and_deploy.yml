name: build and deploy
run-name: ${{ github.event_name }} ${{ github.ref_name }} by @${{ github.actor }}

permissions:
  contents: write
  deployments: read

on:
  release:
    types: 
      - published
      - edited

jobs:
  prepare-values:
    if: ${{ github.event.action == 'published' }}
    runs-on: ubuntu-latest
    outputs:
      SHORT_TAG: ${{ steps.set_output.outputs.SHORT_TAG }}
      NAMESPACE: ${{ steps.set_output.outputs.NAMESPACE }}
      APPLICATIONS: ${{ steps.set_output.outputs.APPLICATIONS }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set output values
        id: set_output
        shell: bash
        run: |
          # release.name has form XXX/vX.Y.Z â€“ 
          # NAMESPACE = part before "/"
          RELEASE_NAME="${{ github.event.release.name }}"
          NAMESPACE="${RELEASE_NAME%%/*}"
          VERSION="${RELEASE_NAME##*/}"
          SHORT_TAG="$VERSION"

          # build list of applications under cmd/$NAMESPACE
          APPS=()
          for d in cmd/"$NAMESPACE"/*; do
            [ -d "$d" ] || continue
            NAME=$(basename "$d")
            APPS+=("bank-${NAMESPACE}-${NAME}")
          done
          
          # represent APPLICATIONS as a JSON array
          APPLICATIONS="["
          for app in "${APPS[@]}"; do
            APPLICATIONS+="\"$app\","
          done
          APPLICATIONS="${APPLICATIONS%,}]"  # remove trailing comma, close array


          echo "SHORT_TAG=$SHORT_TAG" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_OUTPUT
          echo "APPLICATIONS=$APPLICATIONS" >> $GITHUB_OUTPUT

      
      - name: Validate
        shell: bash
        run: |
          NAMESPACE="${{ steps.set_output.outputs.NAMESPACE }}"
          if [ ! -d "./internal/$NAMESPACE" ]; then
            echo "Error: $NAMESPACE' its invalid"
            echo "::error::$NAMESPACE' its invalid"
            exit 1
          fi
          APPLICATIONS="${{ steps.set_output.outputs.APPLICATIONS }}"
          if [ -z "$APPLICATIONS" ]; then
            echo "Error: APPLICATIONS not found"
            echo "::error::APPLICATIONS not found"
            exit 1
          fi
  
  namespace:
    name: show namespace info
    uses: ./.github/workflows/stncard_go_show_namespace_info.yaml
    needs: [prepare-values]
    with:
      RUNS_ON: ubuntu-latest
      NAMESPACE: ${{ needs.prepare-values.outputs.NAMESPACE }}
      APPLICATIONS: ${{ needs.prepare-values.outputs.APPLICATIONS }}
  
  printing:
    name: print info
    if: ${{ github.event.action == 'published' }}
    runs-on: ubuntu-latest
    needs: [prepare-values]
    strategy:
      fail-fast: true
      matrix:
        applications: ${{ FromJson(needs.prepare-values.outputs.APPLICATIONS) }}
    steps:
      - name: Print info
        run: |
          echo "NAMESPACE: ${{ needs.prepare-values.outputs.NAMESPACE }}"
          echo "APPLICATIONS: ${{ matrix.applications }}"

  # compile:
  #   name: Go Compile
  #   uses: ./.github/workflows/stncard_go_build_go.yaml
  #   with:
  #     NAMESPACE: card-authorizer
  #   secrets: inherit

  # build:
  #   name: Build
  #   if: ${{ startsWith(github.ref, 'refs/heads') || startsWith(github.ref, 'refs/tags/') }}
  #   needs: [compile, prepare-tag]
  #   uses: stone-payments/platform-k8s-github-actions/.github/workflows/karavela_build.yml@main
  #   with:
  #     REGISTRY_NAME: bank-card-authorizer
  #     ARTIFACT_NAME: ${{ needs.compile.outputs.artifact_name }}
  #     ARTIFACT_PATH: ${{ needs.compile.outputs.artifact_dir }}
  #     IMAGE_TAG: ${{ needs.prepare-tag.outputs.SHORT_TAG }}
  #     CONTINUE_IF_EXISTING_IMAGE: true
  #   secrets: inherit

  # deploy_stg:
  #   name: Deploy stg
  #   if: ${{ startsWith(github.ref, 'refs/heads') || startsWith(github.ref, 'refs/tags/') }}
  #   needs: [build]
  #   uses: stone-payments/platform-k8s-github-actions/.github/workflows/karavela_deploy.yml@main
  #   strategy:
  #     matrix:
  #       applications: ["bank-card-authorizer-api","bank-card-authorizer-read-api"] # %%APPNAME_ARR%%
  #   with:
  #     APPLICATION_NAME: ${{ matrix.applications }}
  #     ENVIRONMENT: "stg"
  #     TARGET_REVISION: ${{ needs.build.outputs.target_revision }}
  #     IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
  #   secrets: inherit

  # deploy_sdx:
  #   name: Deploy sdx
  #   if: ${{ needs.build.outputs.tag_prd_semver == 'true' }}
  #   needs: [build, deploy_stg]
  #   uses: stone-payments/platform-k8s-github-actions/.github/workflows/karavela_deploy.yml@main
  #   strategy:
  #     matrix:
  #       applications: ["bank-card-authorizer-api","bank-card-authorizer-read-api"] # %%APPNAME_ARR%%
  #   with:
  #     APPLICATION_NAME: ${{ matrix.applications }}
  #     ENVIRONMENT: "sdx"
  #     TARGET_REVISION: ${{ needs.build.outputs.target_revision }}
  #     IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
  #   secrets: inherit

  # approvers:
  #   name: Approvers
  #   if: ${{ needs.build.outputs.tag_prd_semver == 'true' }}
  #   needs: [build, deploy_sdx]
  #   runs-on: small-runner
  #   strategy:
  #     matrix:
  #       environment: [eng-prd, produto-prd]
  #   environment:
  #     name: ${{ matrix.environment }}
  #   steps:
  #     - name: Approvers
  #       run: |
  #         echo "${{ matrix.environment }} approved!"

  # deploy_prd:
  #   name: Deploy prd
  #   if: ${{ needs.build.outputs.tag_prd_semver == 'true' }}
  #   needs: [build, prepare-tag, approvers, deploy_sdx]
  #   uses: stone-payments/platform-k8s-github-actions/.github/workflows/karavela_deploy.yml@main
  #   strategy:
  #     matrix:
  #       applications: ["bank-card-authorizer-api","bank-card-authorizer-read-api"] # %%APPNAME_ARR%%
  #   with:
  #     APPLICATION_NAME: ${{ matrix.applications }}
  #     ENVIRONMENT: "prd"
  #     TARGET_REVISION: ${{ needs.build.outputs.target_revision }}
  #     IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
  #   secrets: inherit
